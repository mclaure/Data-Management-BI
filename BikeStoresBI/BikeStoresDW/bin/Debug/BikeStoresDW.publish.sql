/*
Deployment script for BikeStoresDW

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BikeStoresDW"
:setvar DefaultFilePrefix "BikeStoresDW"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating Schema [staging]...';


GO
CREATE SCHEMA [staging]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Table [staging].[customer]...';


GO
CREATE TABLE [staging].[customer] (
    [CustomerSK] INT           NOT NULL,
    [FirstName]  VARCHAR (255) NOT NULL,
    [LastName]   VARCHAR (255) NOT NULL,
    [Phone]      VARCHAR (25)  NULL,
    [Email]      VARCHAR (255) NOT NULL,
    [Street]     VARCHAR (255) NULL,
    [City]       VARCHAR (50)  NULL,
    [State]      VARCHAR (25)  NULL,
    [ZipCode]    VARCHAR (5)   NULL
);


GO
PRINT N'Creating Table [staging].[orders]...';


GO
CREATE TABLE [staging].[orders] (
    [OrderID]         INT             NOT NULL,
    [ItemID]          INT             NOT NULL,
    [OrderDateKey]    INT             NOT NULL,
    [RequiredDateKey] INT             NOT NULL,
    [ShippedDateKey]  INT             NOT NULL,
    [CustomerSK]      INT             NULL,
    [StaffSK]         INT             NULL,
    [StoreSK]         INT             NULL,
    [ProductSK]       INT             NULL,
    [Quantity]        INT             NOT NULL,
    [ListPrice]       DECIMAL (10, 2) NOT NULL,
    [Discount]        DECIMAL (10, 2) NOT NULL,
    [OrderStatus]     TINYINT         NOT NULL,
    [OrderDate]       DATE            NOT NULL,
    [RequiredDate]    DATE            NOT NULL,
    [ShippedDate]     DATE            NULL
);


GO
PRINT N'Creating Table [staging].[product]...';


GO
CREATE TABLE [staging].[product] (
    [ProductSK]    INT             NOT NULL,
    [ProductName]  VARCHAR (255)   NOT NULL,
    [BrandName]    VARCHAR (255)   NULL,
    [CategoryName] VARCHAR (255)   NULL,
    [ModelYear]    SMALLINT        NULL,
    [ListPrice]    DECIMAL (10, 2) NULL
);


GO
PRINT N'Creating Table [staging].[staff]...';


GO
CREATE TABLE [staging].[staff] (
    [StaffSK]   INT           NOT NULL,
    [FirstName] VARCHAR (50)  NOT NULL,
    [LastName]  VARCHAR (50)  NOT NULL,
    [Email]     VARCHAR (255) NOT NULL,
    [Phone]     VARCHAR (25)  NULL,
    [Active]    TINYINT       NOT NULL,
    [ManagerID] INT           NULL
);


GO
PRINT N'Creating Table [staging].[store]...';


GO
CREATE TABLE [staging].[store] (
    [StoreSK]   INT           NOT NULL,
    [StoreName] VARCHAR (255) NOT NULL,
    [Phone]     VARCHAR (25)  NULL,
    [Email]     VARCHAR (255) NULL,
    [Street]    VARCHAR (255) NULL,
    [City]      VARCHAR (255) NULL,
    [State]     VARCHAR (10)  NULL,
    [ZipCode]   VARCHAR (5)   NULL
);


GO
PRINT N'Creating Table [dbo].[DimCustomer]...';


GO
CREATE TABLE [dbo].[DimCustomer] (
    [CustomerSK] INT           IDENTITY (1, 1) NOT NULL,
    [CustomerID] INT           NOT NULL,
    [FirstName]  VARCHAR (255) NOT NULL,
    [LastName]   VARCHAR (255) NOT NULL,
    [Phone]      VARCHAR (25)  NULL,
    [Email]      VARCHAR (255) NOT NULL,
    [Street]     VARCHAR (255) NULL,
    [City]       VARCHAR (50)  NULL,
    [State]      VARCHAR (25)  NULL,
    [ZipCode]    VARCHAR (5)   NULL,
    CONSTRAINT [PK_DimCustomer] PRIMARY KEY CLUSTERED ([CustomerSK] ASC)
);


GO
PRINT N'Creating Table [dbo].[DimDate]...';


GO
CREATE TABLE [dbo].[DimDate] (
    [DateKey]           INT           NOT NULL,
    [FullDate]          DATE          NOT NULL,
    [DayNumberOfWeek]   TINYINT       NOT NULL,
    [DayNameOfWeek]     NVARCHAR (10) NOT NULL,
    [DayNumberOfMonth]  TINYINT       NOT NULL,
    [DayNumberOfYear]   SMALLINT      NOT NULL,
    [WeekNumberOfYear]  TINYINT       NOT NULL,
    [MonthName]         NVARCHAR (10) NOT NULL,
    [MonthNumberOfYear] TINYINT       NOT NULL,
    [CalendarQuarter]   TINYINT       NOT NULL,
    [CalendarYear]      SMALLINT      NOT NULL,
    [CalendarSemester]  TINYINT       NOT NULL,
    CONSTRAINT [PK_DimDate] PRIMARY KEY CLUSTERED ([DateKey] ASC)
);


GO
PRINT N'Creating Table [dbo].[DimProduct]...';


GO
CREATE TABLE [dbo].[DimProduct] (
    [ProductSK]    INT             IDENTITY (1, 1) NOT NULL,
    [ProductID]    INT             NOT NULL,
    [ProductName]  VARCHAR (255)   NOT NULL,
    [BrandName]    VARCHAR (255)   NOT NULL,
    [CategoryName] VARCHAR (255)   NOT NULL,
    [ModelYear]    SMALLINT        NOT NULL,
    [ListPrice]    DECIMAL (10, 2) NOT NULL,
    CONSTRAINT [PK_DimProduct] PRIMARY KEY CLUSTERED ([ProductSK] ASC)
);


GO
PRINT N'Creating Table [dbo].[DimStaff]...';


GO
CREATE TABLE [dbo].[DimStaff] (
    [StaffSK]   INT           IDENTITY (1, 1) NOT NULL,
    [StaffID]   INT           NOT NULL,
    [FirstName] VARCHAR (50)  NOT NULL,
    [LastName]  VARCHAR (50)  NOT NULL,
    [Email]     VARCHAR (255) NOT NULL,
    [Phone]     VARCHAR (25)  NULL,
    [Active]    TINYINT       NOT NULL,
    [ManagerSK] INT           NULL,
    CONSTRAINT [PK_DimStaff] PRIMARY KEY CLUSTERED ([StaffSK] ASC)
);


GO
PRINT N'Creating Table [dbo].[DimStore]...';


GO
CREATE TABLE [dbo].[DimStore] (
    [StoreSK]   INT           IDENTITY (1, 1) NOT NULL,
    [StoreID]   INT           NOT NULL,
    [StoreName] VARCHAR (255) NOT NULL,
    [Phone]     VARCHAR (25)  NULL,
    [Email]     VARCHAR (255) NULL,
    [Street]    VARCHAR (255) NULL,
    [City]      VARCHAR (255) NULL,
    [State]     VARCHAR (10)  NULL,
    [ZipCode]   VARCHAR (5)   NULL,
    CONSTRAINT [PK_DimStore] PRIMARY KEY CLUSTERED ([StoreSK] ASC)
);


GO
PRINT N'Creating Table [dbo].[FactOrders]...';


GO
CREATE TABLE [dbo].[FactOrders] (
    [OrderID]         INT             NOT NULL,
    [ItemID]          INT             NOT NULL,
    [OrderDateKey]    INT             NOT NULL,
    [RequiredDateKey] INT             NOT NULL,
    [ShippedDateKey]  INT             NOT NULL,
    [CustomerSK]      INT             NULL,
    [StaffSK]         INT             NULL,
    [StoreSK]         INT             NULL,
    [ProductSK]       INT             NULL,
    [Quantity]        INT             NOT NULL,
    [ListPrice]       DECIMAL (10, 2) NOT NULL,
    [Discount]        DECIMAL (10, 2) NOT NULL,
    [OrderStatus]     TINYINT         NOT NULL,
    [OrderDate]       DATE            NOT NULL,
    [RequiredDate]    DATE            NOT NULL,
    [ShippedDate]     DATE            NULL,
    CONSTRAINT [PK_FactOrders] PRIMARY KEY CLUSTERED ([OrderID] ASC, [ItemID] ASC)
);


GO
PRINT N'Creating Table [dbo].[PackageConfig]...';


GO
CREATE TABLE [dbo].[PackageConfig] (
    [PackageID]      INT          IDENTITY (1, 1) NOT NULL,
    [TableName]      VARCHAR (50) NOT NULL,
    [LastRowVersion] BIGINT       NULL,
    CONSTRAINT [PK_PackageConfig] PRIMARY KEY CLUSTERED ([PackageID] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DimCustomer]...';


GO
ALTER TABLE [dbo].[FactOrders] WITH NOCHECK
    ADD CONSTRAINT [FK_DimCustomer] FOREIGN KEY ([CustomerSK]) REFERENCES [dbo].[DimCustomer] ([CustomerSK]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DimDate_OrderDate]...';


GO
ALTER TABLE [dbo].[FactOrders] WITH NOCHECK
    ADD CONSTRAINT [FK_DimDate_OrderDate] FOREIGN KEY ([OrderDateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DimDate_RequiredDate]...';


GO
ALTER TABLE [dbo].[FactOrders] WITH NOCHECK
    ADD CONSTRAINT [FK_DimDate_RequiredDate] FOREIGN KEY ([RequiredDateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DimDate_ShippedDate]...';


GO
ALTER TABLE [dbo].[FactOrders] WITH NOCHECK
    ADD CONSTRAINT [FK_DimDate_ShippedDate] FOREIGN KEY ([ShippedDateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DimProduct]...';


GO
ALTER TABLE [dbo].[FactOrders] WITH NOCHECK
    ADD CONSTRAINT [FK_DimProduct] FOREIGN KEY ([ProductSK]) REFERENCES [dbo].[DimProduct] ([ProductSK]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DimStaff]...';


GO
ALTER TABLE [dbo].[FactOrders] WITH NOCHECK
    ADD CONSTRAINT [FK_DimStaff] FOREIGN KEY ([StaffSK]) REFERENCES [dbo].[DimStaff] ([StaffSK]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DimStore]...';


GO
ALTER TABLE [dbo].[FactOrders] WITH NOCHECK
    ADD CONSTRAINT [FK_DimStore] FOREIGN KEY ([StoreSK]) REFERENCES [dbo].[DimStore] ([StoreSK]);


GO
PRINT N'Creating Procedure [dbo].[DW_MergeDimCustomer]...';


GO
CREATE PROCEDURE [dbo].[DW_MergeDimCustomer]
AS
BEGIN

	UPDATE dc
	SET [FirstName] = sc.[FirstName]
	   ,[LastName]  = sc.[LastName]
	   ,[Phone]     = sc.[Phone]
	   ,[EMail]     = sc.[Email]
	   ,[Street]    = sc.[Street]
	   ,[City]      = sc.[City]
	   ,[State]     = sc.[State]
	   ,[ZipCode]   = sc.[ZipCode]
	FROM [dbo].[DimCustomer]        dc
	INNER JOIN [staging].[customer] sc ON (dc.[CustomerSK]=sc.[CustomerSK])
END
GO
PRINT N'Creating Procedure [dbo].[DW_MergeDimProduct]...';


GO
CREATE PROCEDURE [dbo].[DW_MergeDimProduct]
AS
BEGIN

	UPDATE dc
	SET [ProductName]  = sc.[ProductName]
	   ,[BrandName]    = sc.[BrandName]
	   ,[CategoryName] = sc.[CategoryName]
	   ,[ModelYear]    = sc.[ModelYear]
	   ,[ListPrice]    = sc.[ListPrice]
	FROM [dbo].[DimProduct]         dc
	INNER JOIN [staging].[product] sc ON (dc.[ProductSK]=sc.[ProductSK])
END
GO
PRINT N'Creating Procedure [dbo].[DW_MergeDimStaff]...';


GO
CREATE PROCEDURE [dbo].[DW_MergeDimStaff]
AS
BEGIN

	UPDATE ds
	SET [FirstName] = sc.[FirstName]
	   ,[LastName]  = sc.[LastName]
	   ,[EMail]     = sc.[Email]
	   ,[Phone]     = sc.[Phone]
	   ,[Active]    = sc.[Active]
	   ,[ManagerSk] = sc.[ManagerID]
	FROM [dbo].[DimStaff]           ds
	INNER JOIN [staging].[staff] sc ON (ds.[StaffSK] = sc.[StaffSK])
END
GO
PRINT N'Creating Procedure [dbo].[DW_MergeDimStore]...';


GO
CREATE PROCEDURE [dbo].[DW_MergeDimStore]
AS
BEGIN

	UPDATE dc
	SET [StoreName] = sc.[StoreName]
	   ,[Phone]     = sc.[Phone]
	   ,[EMail]     = sc.[Email]
	   ,[Street]    = sc.[Street]
	   ,[City]      = sc.[City]
	   ,[State]     = sc.[State]
	   ,[ZipCode]   = sc.[ZipCode]
	FROM [dbo].[DimStore]        dc
	INNER JOIN [staging].[store] sc ON (dc.[StoreSK]=sc.[StoreSK])
END
GO
PRINT N'Creating Procedure [dbo].[DW_MergeFactOrders]...';


GO
CREATE PROCEDURE [dbo].[DW_MergeFactOrders]
AS
BEGIN

	UPDATE dc
	SET [OrderDateKey]    = sc.[OrderDateKey]
	   ,[RequiredDateKey] = sc.[RequiredDateKey]
	   ,[ShippedDateKey]  = sc.[ShippedDateKey]
       ,[CustomerSK]      = sc.[CustomerSK]
	   ,[StaffSK]         = sc.[StaffSK]
	   ,[StoreSK]         = sc.[StoreSK]
	   ,[ProductSK]       = sc.[ProductSK]
	   ,[Quantity]        = sc.[Quantity]
	   ,[ListPrice]       = sc.[ListPrice]
	   ,[Discount]        = sc.[Discount]
	   ,[OrderStatus]     = sc.[OrderStatus]
	   ,[OrderDate]       = sc.[OrderDate] 
	   ,[RequiredDate]    = sc.[RequiredDate]
	   ,[ShippedDate]     = sc.[ShippedDate]
	FROM [dbo].[FactOrders]         dc
	INNER JOIN [staging].[orders] sc ON (dc.[OrderID] = sc.[OrderID] AND dc.ItemID = sc.[ItemID])
END
GO
PRINT N'Creating Procedure [dbo].[GetLastPackageRowVersion]...';


GO
CREATE PROCEDURE [dbo].[GetLastPackageRowVersion]
(
	@tableName VARCHAR(50)
)
  AS
  BEGIN
	SELECT LastRowVersion
	FROM [dbo].[PackageConfig]
	WHERE TableName = @tableName;
  END
GO
PRINT N'Creating Procedure [dbo].[UpdateLastPackageRowVersion]...';


GO
CREATE PROCEDURE [dbo].[UpdateLastPackageRowVersion]
  (
	@tableName VARCHAR(50)
	,@lastRowVersion BIGINT
  )
  AS
  BEGIN
	UPDATE [dbo].[PackageConfig]
	SET LastRowVersion = @lastRowVersion
	WHERE TableName = @tableName;
  END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF NOT EXISTS(SELECT TOP(1) 1
              FROM [dbo].[PackageConfig]
			  WHERE [TableName] = 'Customer')
 BEGIN
	INSERT [dbo].[PackageConfig] ([TableName], [LastRowVersion]) VALUES ('Customer', 0)
 END
GO
IF NOT EXISTS(SELECT TOP(1) 1
              FROM [dbo].[PackageConfig]
			  WHERE [TableName] = 'Staff')
 BEGIN
	INSERT [dbo].[PackageConfig] ([TableName], [LastRowVersion]) VALUES ('Staff', 0)
 END
GO
IF NOT EXISTS(SELECT TOP(1) 1
              FROM [dbo].[PackageConfig]
			  WHERE [TableName] = 'Store')
 BEGIN
  INSERT [dbo].[PackageConfig] ([TableName], [LastRowVersion]) VALUES ('Store', 0)
 END
GO
IF NOT EXISTS(SELECT TOP(1) 1
              FROM [dbo].[PackageConfig]
			  WHERE [TableName] = 'Product')
 BEGIN
	INSERT [dbo].[PackageConfig] ([TableName], [LastRowVersion]) VALUES ('Product', 0)
 END
GO
IF NOT EXISTS(SELECT TOP(1) 1
              FROM [dbo].[PackageConfig]
			  WHERE [TableName] = 'Orders')
 BEGIN
	INSERT [dbo].[PackageConfig] ([TableName], [LastRowVersion]) VALUES ('Orders', 0)
 END
GO

IF NOT EXISTS(SELECT TOP(1) 1
              FROM [dbo].[DimDate])
 BEGIN
	BEGIN TRAN 
		DECLARE @startdate DATE = '2016-01-01',
				@enddate   DATE = '2019-01-01';
		DECLARE @datelist TABLE(FullDate DATE);

	IF @startdate IS NULL
		BEGIN
			SELECT TOP 1 
				   @startdate = FullDate
			FROM dbo.DimDate 
			ORDER By DateKey ASC;
		END

	WHILE (@startdate <= @enddate)
	BEGIN 
		INSERT INTO @datelist(FullDate)
		SELECT @startdate

		SET @startdate = DATEADD(dd,1,@startdate);
	END

	 INSERT INTO dbo.DimDate(DateKey
							,FullDate 
							,DayNumberOfWeek 
							,DayNameOfWeek 
							,DayNumberOfMonth 
							,DayNumberOfYear 
							,WeekNumberOfYear 
							,[MonthName] 
							,MonthNumberOfYear 
							,CalendarQuarter 
							,CalendarYear 
							,CalendarSemester)

	SELECT DateKey           = CONVERT(INT,CONVERT(VARCHAR,dl.FullDate,112))
		  ,FullDate          = dl.FullDate
		  ,DayNumberOfWeek   = DATEPART(dw,dl.FullDate)
		  ,DayNameOfWeek     = DATENAME(WEEKDAY,dl.FullDate) 
		  ,DayNumberOfMonth  = DATEPART(d,dl.FullDate)
		  ,DayNumberOfYear   = DATEPART(dy,dl.FullDate)
		  ,WeekNumberOfYear  = DATEPART(wk, dl.FUllDate)
		  ,[MonthName]       = DATENAME(MONTH,dl.FullDate) 
		  ,MonthNumberOfYear = MONTH(dl.FullDate)
		  ,CalendarQuarter   = DATEPART(qq, dl.FullDate)
		  ,CalendarYear      = YEAR(dl.FullDate)
		  ,CalendarSemester  = CASE DATEPART(qq, dl.FullDate)
										WHEN 1 THEN 1
										WHEN 2 THEN 1
										WHEN 3 THEN 2
										WHEN 4 THEN 2
								  END
		FROM @datelist              dl 
		LEFT OUTER JOIN dbo.DimDate dd ON (dl.FullDate = dd.FullDate)
		WHERE dd.FullDate IS NULL;
	COMMIT TRAN
END
GO
IF NOT EXISTS(SELECT TOP(1) 1
              FROM [dbo].[DimDate]
			  WHERE [DateKey] = 0)
BEGIN

    INSERT INTO [dbo].[DimDate]
               ([DateKey]
               ,[FullDate]
               ,[DayNumberOfWeek]
               ,[DayNameOfWeek]
               ,[DayNumberOfMonth]
               ,[DayNumberOfYear]
               ,[WeekNumberOfYear]
               ,[MonthName]
               ,[MonthNumberOfYear]
               ,[CalendarQuarter]
               ,[CalendarYear]
               ,[CalendarSemester])
         VALUES
               (0
               ,GETDATE()
               ,0
               ,''
               ,0
               ,0
               ,1
               ,''
               ,0
               ,0
               ,0
               ,0);
END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[FactOrders] WITH CHECK CHECK CONSTRAINT [FK_DimCustomer];

ALTER TABLE [dbo].[FactOrders] WITH CHECK CHECK CONSTRAINT [FK_DimDate_OrderDate];

ALTER TABLE [dbo].[FactOrders] WITH CHECK CHECK CONSTRAINT [FK_DimDate_RequiredDate];

ALTER TABLE [dbo].[FactOrders] WITH CHECK CHECK CONSTRAINT [FK_DimDate_ShippedDate];

ALTER TABLE [dbo].[FactOrders] WITH CHECK CHECK CONSTRAINT [FK_DimProduct];

ALTER TABLE [dbo].[FactOrders] WITH CHECK CHECK CONSTRAINT [FK_DimStaff];

ALTER TABLE [dbo].[FactOrders] WITH CHECK CHECK CONSTRAINT [FK_DimStore];


GO
PRINT N'Update complete.';


GO
